/* automatically generated by rust-bindgen 0.59.1 */

pub const OPUS_OK: u32 = 0;
pub const OPUS_BAD_ARG: i32 = -1;
pub const OPUS_BUFFER_TOO_SMALL: i32 = -2;
pub const OPUS_INTERNAL_ERROR: i32 = -3;
pub const OPUS_INVALID_PACKET: i32 = -4;
pub const OPUS_UNIMPLEMENTED: i32 = -5;
pub const OPUS_INVALID_STATE: i32 = -6;
pub const OPUS_ALLOC_FAIL: i32 = -7;
pub const OPUS_SET_APPLICATION_REQUEST: u32 = 4000;
pub const OPUS_GET_APPLICATION_REQUEST: u32 = 4001;
pub const OPUS_SET_BITRATE_REQUEST: u32 = 4002;
pub const OPUS_GET_BITRATE_REQUEST: u32 = 4003;
pub const OPUS_SET_MAX_BANDWIDTH_REQUEST: u32 = 4004;
pub const OPUS_GET_MAX_BANDWIDTH_REQUEST: u32 = 4005;
pub const OPUS_SET_VBR_REQUEST: u32 = 4006;
pub const OPUS_GET_VBR_REQUEST: u32 = 4007;
pub const OPUS_SET_BANDWIDTH_REQUEST: u32 = 4008;
pub const OPUS_GET_BANDWIDTH_REQUEST: u32 = 4009;
pub const OPUS_SET_COMPLEXITY_REQUEST: u32 = 4010;
pub const OPUS_GET_COMPLEXITY_REQUEST: u32 = 4011;
pub const OPUS_SET_INBAND_FEC_REQUEST: u32 = 4012;
pub const OPUS_GET_INBAND_FEC_REQUEST: u32 = 4013;
pub const OPUS_SET_PACKET_LOSS_PERC_REQUEST: u32 = 4014;
pub const OPUS_GET_PACKET_LOSS_PERC_REQUEST: u32 = 4015;
pub const OPUS_SET_DTX_REQUEST: u32 = 4016;
pub const OPUS_GET_DTX_REQUEST: u32 = 4017;
pub const OPUS_SET_VBR_CONSTRAINT_REQUEST: u32 = 4020;
pub const OPUS_GET_VBR_CONSTRAINT_REQUEST: u32 = 4021;
pub const OPUS_SET_FORCE_CHANNELS_REQUEST: u32 = 4022;
pub const OPUS_GET_FORCE_CHANNELS_REQUEST: u32 = 4023;
pub const OPUS_SET_SIGNAL_REQUEST: u32 = 4024;
pub const OPUS_GET_SIGNAL_REQUEST: u32 = 4025;
pub const OPUS_GET_LOOKAHEAD_REQUEST: u32 = 4027;
pub const OPUS_GET_SAMPLE_RATE_REQUEST: u32 = 4029;
pub const OPUS_GET_FINAL_RANGE_REQUEST: u32 = 4031;
pub const OPUS_GET_PITCH_REQUEST: u32 = 4033;
pub const OPUS_SET_GAIN_REQUEST: u32 = 4034;
pub const OPUS_GET_GAIN_REQUEST: u32 = 4045;
pub const OPUS_SET_LSB_DEPTH_REQUEST: u32 = 4036;
pub const OPUS_GET_LSB_DEPTH_REQUEST: u32 = 4037;
pub const OPUS_GET_LAST_PACKET_DURATION_REQUEST: u32 = 4039;
pub const OPUS_SET_EXPERT_FRAME_DURATION_REQUEST: u32 = 4040;
pub const OPUS_GET_EXPERT_FRAME_DURATION_REQUEST: u32 = 4041;
pub const OPUS_SET_PREDICTION_DISABLED_REQUEST: u32 = 4042;
pub const OPUS_GET_PREDICTION_DISABLED_REQUEST: u32 = 4043;
pub const OPUS_SET_PHASE_INVERSION_DISABLED_REQUEST: u32 = 4046;
pub const OPUS_GET_PHASE_INVERSION_DISABLED_REQUEST: u32 = 4047;
pub const OPUS_GET_IN_DTX_REQUEST: u32 = 4049;
pub const OPUS_AUTO: i32 = -1000;
pub const OPUS_BITRATE_MAX: i32 = -1;
pub const OPUS_APPLICATION_VOIP: u32 = 2048;
pub const OPUS_APPLICATION_AUDIO: u32 = 2049;
pub const OPUS_APPLICATION_RESTRICTED_LOWDELAY: u32 = 2051;
pub const OPUS_SIGNAL_VOICE: u32 = 3001;
pub const OPUS_SIGNAL_MUSIC: u32 = 3002;
pub const OPUS_BANDWIDTH_NARROWBAND: u32 = 1101;
pub const OPUS_BANDWIDTH_MEDIUMBAND: u32 = 1102;
pub const OPUS_BANDWIDTH_WIDEBAND: u32 = 1103;
pub const OPUS_BANDWIDTH_SUPERWIDEBAND: u32 = 1104;
pub const OPUS_BANDWIDTH_FULLBAND: u32 = 1105;
pub const OPUS_FRAMESIZE_ARG: u32 = 5000;
pub const OPUS_FRAMESIZE_2_5_MS: u32 = 5001;
pub const OPUS_FRAMESIZE_5_MS: u32 = 5002;
pub const OPUS_FRAMESIZE_10_MS: u32 = 5003;
pub const OPUS_FRAMESIZE_20_MS: u32 = 5004;
pub const OPUS_FRAMESIZE_40_MS: u32 = 5005;
pub const OPUS_FRAMESIZE_60_MS: u32 = 5006;
pub const OPUS_FRAMESIZE_80_MS: u32 = 5007;
pub const OPUS_FRAMESIZE_100_MS: u32 = 5008;
pub const OPUS_FRAMESIZE_120_MS: u32 = 5009;
pub const OPUS_RESET_STATE: u32 = 4028;
pub type opus_int32 = ::std::os::raw::c_int;
pub type opus_uint32 = ::std::os::raw::c_uint;
pub type opus_int16 = ::std::os::raw::c_short;
pub type opus_uint16 = ::std::os::raw::c_ushort;
extern "C" {
    #[doc = " Converts an opus error code into a human readable string."]
    #[doc = ""]
    #[doc = " @param[in] error <tt>int</tt>: Error number"]
    #[doc = " @returns Error string"]
    pub fn opus_strerror(error: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Gets the libopus version string."]
    #[doc = ""]
    #[doc = " Applications may look for the substring \"-fixed\" in the version string to"]
    #[doc = " determine whether they have a fixed-point or floating-point build at"]
    #[doc = " runtime."]
    #[doc = ""]
    #[doc = " @returns Version string"]
    pub fn opus_get_version_string() -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpusCustomEncoder {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpusCustomDecoder {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpusCustomMode {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " Creates a new mode struct. This will be passed to an encoder or"]
    #[doc = " decoder. The mode MUST NOT BE DESTROYED until the encoders and"]
    #[doc = " decoders that use it are destroyed as well."]
    #[doc = " @param [in] Fs <tt>int</tt>: Sampling rate (8000 to 96000 Hz)"]
    #[doc = " @param [in] frame_size <tt>int</tt>: Number of samples (per channel) to encode in each"]
    #[doc = "        packet (64 - 1024, prime factorization must contain zero or more 2s, 3s, or 5s and no other primes)"]
    #[doc = " @param [out] error <tt>int*</tt>: Returned error code (if NULL, no error will be returned)"]
    #[doc = " @return A newly created mode"]
    pub fn opus_custom_mode_create(
        Fs: opus_int32,
        frame_size: ::std::os::raw::c_int,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut OpusCustomMode;
}
extern "C" {
    #[doc = " Destroys a mode struct. Only call this after all encoders and"]
    #[doc = " decoders using this mode are destroyed as well."]
    #[doc = " @param [in] mode <tt>OpusCustomMode*</tt>: Mode to be freed."]
    pub fn opus_custom_mode_destroy(mode: *mut OpusCustomMode);
}
extern "C" {
    #[doc = " Gets the size of an OpusCustomEncoder structure."]
    #[doc = " @param [in] mode <tt>OpusCustomMode *</tt>: Mode configuration"]
    #[doc = " @param [in] channels <tt>int</tt>: Number of channels"]
    #[doc = " @returns size"]
    pub fn opus_custom_encoder_get_size(
        mode: *const OpusCustomMode,
        channels: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Creates a new encoder state. Each stream needs its own encoder"]
    #[doc = " state (can't be shared across simultaneous streams)."]
    #[doc = " @param [in] mode <tt>OpusCustomMode*</tt>: Contains all the information about the characteristics of"]
    #[doc = "  the stream (must be the same characteristics as used for the"]
    #[doc = "  decoder)"]
    #[doc = " @param [in] channels <tt>int</tt>: Number of channels"]
    #[doc = " @param [out] error <tt>int*</tt>: Returns an error code"]
    #[doc = " @return Newly created encoder state."]
    pub fn opus_custom_encoder_create(
        mode: *const OpusCustomMode,
        channels: ::std::os::raw::c_int,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut OpusCustomEncoder;
}
extern "C" {
    #[doc = " Destroys an encoder state."]
    #[doc = " @param[in] st <tt>OpusCustomEncoder*</tt>: State to be freed."]
    pub fn opus_custom_encoder_destroy(st: *mut OpusCustomEncoder);
}
extern "C" {
    #[doc = " Encodes a frame of audio."]
    #[doc = " @param [in] st <tt>OpusCustomEncoder*</tt>: Encoder state"]
    #[doc = " @param [in] pcm <tt>float*</tt>: PCM audio in float format, with a normal range of +/-1.0."]
    #[doc = "          Samples with a range beyond +/-1.0 are supported but will"]
    #[doc = "          be clipped by decoders using the integer API and should"]
    #[doc = "          only be used if it is known that the far end supports"]
    #[doc = "          extended dynamic range. There must be exactly"]
    #[doc = "          frame_size samples per channel."]
    #[doc = " @param [in] frame_size <tt>int</tt>: Number of samples per frame of input signal"]
    #[doc = " @param [out] compressed <tt>char *</tt>: The compressed data is written here. This may not alias pcm and must be at least maxCompressedBytes long."]
    #[doc = " @param [in] maxCompressedBytes <tt>int</tt>: Maximum number of bytes to use for compressing the frame"]
    #[doc = "          (can change from one frame to another)"]
    #[doc = " @return Number of bytes written to \"compressed\"."]
    #[doc = "       If negative, an error has occurred (see error codes). It is IMPORTANT that"]
    #[doc = "       the length returned be somehow transmitted to the decoder. Otherwise, no"]
    #[doc = "       decoding is possible."]
    pub fn opus_custom_encode_float(
        st: *mut OpusCustomEncoder,
        pcm: *const f32,
        frame_size: ::std::os::raw::c_int,
        compressed: *mut ::std::os::raw::c_uchar,
        maxCompressedBytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Encodes a frame of audio."]
    #[doc = " @param [in] st <tt>OpusCustomEncoder*</tt>: Encoder state"]
    #[doc = " @param [in] pcm <tt>opus_int16*</tt>: PCM audio in signed 16-bit format (native endian)."]
    #[doc = "          There must be exactly frame_size samples per channel."]
    #[doc = " @param [in] frame_size <tt>int</tt>: Number of samples per frame of input signal"]
    #[doc = " @param [out] compressed <tt>char *</tt>: The compressed data is written here. This may not alias pcm and must be at least maxCompressedBytes long."]
    #[doc = " @param [in] maxCompressedBytes <tt>int</tt>: Maximum number of bytes to use for compressing the frame"]
    #[doc = "          (can change from one frame to another)"]
    #[doc = " @return Number of bytes written to \"compressed\"."]
    #[doc = "       If negative, an error has occurred (see error codes). It is IMPORTANT that"]
    #[doc = "       the length returned be somehow transmitted to the decoder. Otherwise, no"]
    #[doc = "       decoding is possible."]
    pub fn opus_custom_encode(
        st: *mut OpusCustomEncoder,
        pcm: *const opus_int16,
        frame_size: ::std::os::raw::c_int,
        compressed: *mut ::std::os::raw::c_uchar,
        maxCompressedBytes: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Perform a CTL function on an Opus custom encoder."]
    #[doc = ""]
    #[doc = " Generally the request and subsequent arguments are generated"]
    #[doc = " by a convenience macro."]
    #[doc = " @see opus_encoderctls"]
    pub fn opus_custom_encoder_ctl(
        st: *mut OpusCustomEncoder,
        request: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Gets the size of an OpusCustomDecoder structure."]
    #[doc = " @param [in] mode <tt>OpusCustomMode *</tt>: Mode configuration"]
    #[doc = " @param [in] channels <tt>int</tt>: Number of channels"]
    #[doc = " @returns size"]
    pub fn opus_custom_decoder_get_size(
        mode: *const OpusCustomMode,
        channels: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Initializes a previously allocated decoder state"]
    #[doc = " The memory pointed to by st must be the size returned by opus_custom_decoder_get_size."]
    #[doc = " This is intended for applications which use their own allocator instead of malloc."]
    #[doc = " @see opus_custom_decoder_create(),opus_custom_decoder_get_size()"]
    #[doc = " To reset a previously initialized state use the OPUS_RESET_STATE CTL."]
    #[doc = " @param [in] st <tt>OpusCustomDecoder*</tt>: Decoder state"]
    #[doc = " @param [in] mode <tt>OpusCustomMode *</tt>: Contains all the information about the characteristics of"]
    #[doc = "  the stream (must be the same characteristics as used for the"]
    #[doc = "  encoder)"]
    #[doc = " @param [in] channels <tt>int</tt>: Number of channels"]
    #[doc = " @return OPUS_OK Success or @ref opus_errorcodes"]
    pub fn opus_custom_decoder_init(
        st: *mut OpusCustomDecoder,
        mode: *const OpusCustomMode,
        channels: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Creates a new decoder state. Each stream needs its own decoder state (can't"]
    #[doc = " be shared across simultaneous streams)."]
    #[doc = " @param [in] mode <tt>OpusCustomMode</tt>: Contains all the information about the characteristics of the"]
    #[doc = "          stream (must be the same characteristics as used for the encoder)"]
    #[doc = " @param [in] channels <tt>int</tt>: Number of channels"]
    #[doc = " @param [out] error <tt>int*</tt>: Returns an error code"]
    #[doc = " @return Newly created decoder state."]
    pub fn opus_custom_decoder_create(
        mode: *const OpusCustomMode,
        channels: ::std::os::raw::c_int,
        error: *mut ::std::os::raw::c_int,
    ) -> *mut OpusCustomDecoder;
}
extern "C" {
    #[doc = " Destroys a decoder state."]
    #[doc = " @param[in] st <tt>OpusCustomDecoder*</tt>: State to be freed."]
    pub fn opus_custom_decoder_destroy(st: *mut OpusCustomDecoder);
}
extern "C" {
    #[doc = " Decode an opus custom frame with floating point output"]
    #[doc = " @param [in] st <tt>OpusCustomDecoder*</tt>: Decoder state"]
    #[doc = " @param [in] data <tt>char*</tt>: Input payload. Use a NULL pointer to indicate packet loss"]
    #[doc = " @param [in] len <tt>int</tt>: Number of bytes in payload"]
    #[doc = " @param [out] pcm <tt>float*</tt>: Output signal (interleaved if 2 channels). length"]
    #[doc = "  is frame_size*channels*sizeof(float)"]
    #[doc = " @param [in] frame_size Number of samples per channel of available space in *pcm."]
    #[doc = " @returns Number of decoded samples or @ref opus_errorcodes"]
    pub fn opus_custom_decode_float(
        st: *mut OpusCustomDecoder,
        data: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        pcm: *mut f32,
        frame_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Decode an opus custom frame"]
    #[doc = " @param [in] st <tt>OpusCustomDecoder*</tt>: Decoder state"]
    #[doc = " @param [in] data <tt>char*</tt>: Input payload. Use a NULL pointer to indicate packet loss"]
    #[doc = " @param [in] len <tt>int</tt>: Number of bytes in payload"]
    #[doc = " @param [out] pcm <tt>opus_int16*</tt>: Output signal (interleaved if 2 channels). length"]
    #[doc = "  is frame_size*channels*sizeof(opus_int16)"]
    #[doc = " @param [in] frame_size Number of samples per channel of available space in *pcm."]
    #[doc = " @returns Number of decoded samples or @ref opus_errorcodes"]
    pub fn opus_custom_decode(
        st: *mut OpusCustomDecoder,
        data: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_int,
        pcm: *mut opus_int16,
        frame_size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Perform a CTL function on an Opus custom decoder."]
    #[doc = ""]
    #[doc = " Generally the request and subsequent arguments are generated"]
    #[doc = " by a convenience macro."]
    #[doc = " @see opus_genericctls"]
    pub fn opus_custom_decoder_ctl(
        st: *mut OpusCustomDecoder,
        request: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
